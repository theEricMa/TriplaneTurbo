name: "asd_mv+sd_sd3d_v1_dmtet_volsdf_10k_semisup"
tag: "${rmspace:${data.prompt_library}+${data.obj_library},_}"
exp_root_dir: "outputs"
seed: 0

data_type: "multiview-multiprompt-dualrenderer-semisupervised-datamodule"
data:
  batch_size: 4 # should be the same as n_views
  n_view: 4 
  # 0-4999: 64x64, >=5000: 512x512
  # this drastically reduces VRAM usage as empty space is pruned in early training
  width: 256
  height: 256
  ray_height: 64
  ray_width: 64
  # unsupervised data
  prompt_library: ???
  unsup_elevation_range: [0, 30]
  unsup_camera_distance_range: [0.8, 1.0] # relative
  unsup_fovy_range: [15, 60]
  relative_radius: true
  eval_camera_distance: 3.0
  eval_fovy_deg: 40.
  n_val_views: 30
  # supervised data
  obj_library: ???
  meta_json: "filtered_3DTopia-objaverse-caption-361k.json"
  rgb_data_dir: "exported_rgb"
  normal_data_dir: "exported_normal"
  depth_data_dir: "exported_depth"
  camera_data_dir: "exported_json"
  frontal_idx: 24 # 24 is the frontal view
  # the sup / unsup ratio, for training
  sup_unsup_mode: "50/50" # "vanilla"
  dim_gaussian: [3, 4, 32, 32] # not used
  pure_zeros: false

  # the prompt library is move from the system to the data module
  prompt_processor_type: "stable-diffusion-multi-prompt-processor-dual-uncond-callable"
  prompt_processor:
    pretrained_model_name_or_path: "pretrained/stable-diffusion-2-1-base"
    negative_prompt: ""
    negative_prompt_2nd: "ugly, bad anatomy, blurry, pixelated obscure, unnatural colors, poor lighting, dull, and unclear, cropped, lowres, low quality, artifacts, duplicate, morbid, mutilated, poorly drawn face, deformed, dehydrated, bad proportions"
    gpu_split: false
    use_local_text_embeddings: true
    # use_perp_neg: true
    # front_threshold: 30. # same as vsd
    # back_threshold: 30.


system_type: "multiprompt-dual-renderer-semi-sup-generator-system"
system:
  stage: "coarse"
  initialize_shape: false # #true #
  visualize_samples: false 
  parallel_guidance: true

  geometry_type: "one-step-triplane-stable-diffusion"
  geometry:
    radius: 1. #1.5 shrink a bit
    normal_type: "finite_difference"
    finite_difference_normal_eps: 0.01

    sdf_bias: sphere
    sdf_bias_params: 0.5 # a small bias will be fine?

    space_generator_config:
      pretrained_model_name_or_path: "pretrained/sd-turbo"
      training_type: "lora_rank_8_locon_rank_8_with_bias" # _with_bias
      timestep: 999
      num_planes: 3
      output_dim: 32
      # gradient_checkpoint: true

  material_type: no-material
  material:
    n_output_dims: 3
    requires_normal: true
    color_activation: sigmoid-mipnerf # follow OpenLRM

  background_type: "neural-environment-map-background"
  background:
    color_activation: sigmoid
    random_aug: false
    random_aug_prob: 0.5
    dir_encoding_config:
      otype: HashGrid
      n_features_per_level: 2
      log2_hashmap_size: 19
      n_levels: 4
      base_resolution: 4
      # desired_resolution = 256
      per_level_scale: 4.0
      # per_level_scale = np.exp2(np.log2(desired_resolution / base_resolution) / (num_levels - 1))

  renderer_type: generative-space-dmtet-rasterize-renderer
  renderer:
    radius: ${system.geometry.radius}
    isosurface_remove_outliers: false
    isosurface_method: "mc-cpu"

  renderer_2nd_type: generative-space-volsdf-volume-renderer
  renderer_2nd:
    radius: ${system.geometry.radius}
    use_volsdf: true
    trainable_variance: false # important!
    learned_variance_init: 0.340119 # 0.340119 = log(50) / 10, 50 is the most common variance across the prompts

    estimator: importance
    num_samples_per_ray: 64
    num_samples_per_ray_importance: 128
    near_plane: 0.1
    far_plane: 4.0
    train_chunk_size: 0 #100000

  guidance_type: "stable-diffusion-mvdream-asynchronous-score-distillation-guidance"
  guidance:
    mv_model_name_or_path: "sd-v2.1-base-4view"
    mv_ckpt_path: "pretrained/sd-v2.1-base-4view.pt" # path to a pre-downloaded checkpoint file (null for loading from URL)
    sd_model_name_or_path: "pretrained/stable-diffusion-2-1-base"
    weighting_strategy: "uniform"
    guidance_scale: 7.5
    plus_ratio: 0.1
    plus_random: true
    min_step_percent: [0, 0.5, 0.02, 100000] # follow MVDream
    max_step_percent: [0, 0.98, 0.5, 100000] # same as vsd
    sd_weight: 1.
    # sd_guidance_perp_neg: -0.5
    sd_view_dependent_prompting: false
    mv_weight: 1.

  loggers:
    wandb:
      enable: false
      project: "threestudio"
      name: None

  loss:
    lambda_asd: 1
    lambda_orient: 0.
    lambda_sparsity: 0
    lambda_opaque: 0 # final 1/5 iterations
    lambda_z_variance: 0.
    lambda_eikonal: 0. #0.1 #[1, 10., 1., 10000] # fisrt 1/10 iterations
    lambda_normal_consistency: 0. #10.
    lambda_laplacian_smoothness: 0. #10.
    lambda_normal_smoothness_2d: 0.

    lambda_asd_2nd: 1.
    lambda_orient_2nd: 0.
    lambda_sparsity_2nd: 30.
    lambda_opaque_2nd: 0. #1.
    lambda_z_variance_2nd: 0.
    lambda_eikonal_2nd: 0.005
    lambda_normal_consistency_2nd: 0.
    lambda_laplacian_smoothness_2nd: 0.
    lambda_normal_smoothness_2d_2nd: 0. #100 #${system.loss.lambda_normal_smoothness_2d}

  optimizer:
    name: Adan # for fast convergence
    args:
      betas: [0.98, 0.92, 0.99]
      eps: 1.e-15
    params:
      geometry:
        lr: 0.0002
      background:
        lr: 0.0002



trainer:
  max_steps: 100000
  log_every_n_steps: 1
  num_sanity_val_steps: 0
  # val_check_interval: 20000
  check_val_every_n_epoch: 100
  enable_progress_bar: true
  precision: 32
  strategy: "ddp" # "deepspeed_stage_2"
  accumulate_grad_batches: 2

checkpoint:
  save_last: true
  save_top_k: -1
  every_n_epochs: ${trainer.check_val_every_n_epoch}
  # every_n_train_steps: ${trainer.val_check_interval}
